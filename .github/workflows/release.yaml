name: Reusable release workflow

on:
  workflow_call:
    inputs:
      registry:
        description: 'Registry'
        type: string
        required: false
        default: ghcr.io
      registry-username:
        description: 'Registry username'
        type: string
        required: false
        default: ${{ github.actor }}
      registry-password:
        description: 'Registry password'
        type: string
        required: false
        default: ${{ github.token }}
      image:
        description: 'Image name'
        type: string
        required: false
        default: opopops/wolfi/${{ github.workflow }}
      tag:
        description: 'Image tag'
        type: string
        required: false
        default: 'latest'
      config-dir:
        description: 'Config directory'
        type: string
        required: false
        default: images/${{ github.workflow }}
      target:
        description: 'Image target'
        type: string
        required: false
        default: 'prod'
      packages:
        description: 'Additional packages'
        type: string
        required: false
        default: ''
      archs:
        description: 'Architectures'
        type: string
        required: false
        default: 'amd64,arm64'
      scan:
        description: 'Enable scan'
        type: string
        required: false
        default: 'true'
      dagger:
        description: "Enable dagger instead of GitHub actions"
        type: string
        required: false
        default: 'true'

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  security-events: write
  actions: read

jobs:
  ### --- Dagger
  publish:
      runs-on: ubuntu-latest
      outputs:
      #   digest: ${{ steps.ako.outputs.digest }}
          digest: ${{ steps.publish.outputs.output }}
      steps:
        - if: inputs.dagger != 'true'
          uses: imjasonh/setup-crane@v0.4

        - if: inputs.dagger != 'true'
          uses: sigstore/cosign-installer@v3

        - name: Checkout
          uses: actions/checkout@v4

        - name: Login to Registry
          uses: docker/login-action@v3
          id: login-to-registry
          with:
            registry: ${{ inputs.registry }}
            username: ${{ inputs.registry-username }}
            password: ${{ inputs.registry-password || github.token }}

        - if: inputs.dagger == 'true'
          name: Publish And Sign with dagger
          id: publish
          uses: dagger/dagger-for-github@8.0.0
          env:
            ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN}}
            ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
            GITHUB_TOKEN: ${{ github.token }}
            REGISTRY_PASSWORD: ${{ inputs.registry-password || github.token }}
          with:
            version: "0.18.7"
            cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}
            verb: call
            args: |
              --github-actions=true \
              --github-actor=${{ github.actor }} \
              --github-token=env://GITHUB_TOKEN \
              --github-oidc-provider-token=env://ACTIONS_ID_TOKEN_REQUEST_TOKEN \
              --github-oidc-provider-url=env://ACTIONS_ID_TOKEN_REQUEST_URL \
              with-registry-auth \
                --address=${{ inputs.registry }} \
                --username=${{ inputs.registry-username }} \
                --secret=env://REGISTRY_PASSWORD \
              publish \
                --config=${{ inputs.config-dir }}/${{ inputs.target }}.yaml \
                --tag=${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }} \
                --scan=false \
                --sign=true \
                --oidc-provider='github-actions' \

        - if: inputs.dagger != 'true'
          name: Create SBOM directory
          id: output
          shell: bash
          run: |
            mkdir -p ${{ github.workspace }}/sbom

        - if: inputs.dagger != 'true'
          name: Publish with apko
          id: apko
          uses: distroless/actions/apko-publish@main
          with:
            config: ${{ inputs.config-dir }}/${{ inputs.target }}.yaml
            tag: ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}
            package-append: ${{ inputs.packages }}
            archs: ${{ inputs.archs }}
            sbom-path: ${{ github.workspace }}/sbom

        - if: inputs.dagger != 'true'
          name: Get multi-arch image digests
          id: digest
          shell: bash
          run: |
            echo "digest=$(crane digest ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }})" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.archs }}" == *"amd64"* ]]; then
                echo "digest-amd64=$(crane digest --platform=linux/amd64 ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }})" >> $GITHUB_OUTPUT
            else
                echo "digest-amd64=''" >> $GITHUB_OUTPUT
            fi
            if [[ "${{ inputs.archs }}" == *"arm64"* ]]; then
                echo "digest-arm64=$(crane digest --platform=linux/arm64 ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }})" >> $GITHUB_OUTPUT
            else
                echo "digest-arm64=''" >> $GITHUB_OUTPUT
            fi

        - if: inputs.dagger != 'true'
          name: Sign image
          shell: bash
          env:
            COSIGN_YES: "true"
          run: |
            cosign sign \
              --recursive \
              --oidc-provider=github-actions \
              ${{ inputs.registry }}/${{ inputs.image }}@${{ steps.digest.outputs.digest }}

        - if: inputs.dagger != 'true'
          name: Attest index SBOM
          shell: bash
          env:
            COSIGN_YES: "true"
          run: |
            cosign attest \
              --type=spdxjson \
              --predicate=${{ github.workspace }}/sbom/sbom-index.spdx.json \
              --oidc-provider=github-actions \
              ${{ inputs.registry }}/${{ inputs.image }}@${{ steps.digest.outputs.digest }}

        - if: inputs.dagger != 'true' && steps.digest.outputs.digest-amd64 != ''
          name: Attest amd64 SBOM
          shell: bash
          env:
            COSIGN_YES: "true"
          run: |
            cosign attest \
              --type=spdxjson \
              --predicate=${{ github.workspace }}/sbom/sbom-x86_64.spdx.json \
              --oidc-provider=github-actions \
              ${{ inputs.registry }}/${{ inputs.image }}@${{ steps.digest.outputs.digest-amd64 }}

        - if: inputs.dagger != 'true' && steps.digest.outputs.digest-arm64 != ''
          name: Attest arm64 SBOM
          shell: bash
          env:
            COSIGN_YES: "true"
          run: |
            cosign attest \
              --type=spdxjson \
              --predicate=${{ github.workspace }}/sbom/sbom-aarch64.spdx.json \
              --oidc-provider=github-actions \
              ${{ inputs.registry }}/${{ inputs.image }}@${{ steps.digest.outputs.digest-arm64 }}

        - name: Attest provenance
          uses: actions/attest-build-provenance@v2
          with:
            subject-name: ${{ inputs.registry }}/${{ inputs.image }}
            subject-digest: ${{ steps.publish.outputs.output }}
            push-to-registry: true

        - if: inputs.scan == 'true'
          name: Scan image
          id: scan
          uses: anchore/scan-action@v6
          with:
            image: ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}
            cache-db: true
            fail-build: 'false'
            severity-cutoff: 'high'
            #grype-version: v0.87.0

        - if: inputs.scan == 'true'
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: ${{ steps.scan.outputs.sarif }}
            category: ${{ github.workflow }}
